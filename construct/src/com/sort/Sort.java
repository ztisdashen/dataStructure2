package com.sort;

public class Sort {
	/**
	 * ?????????¡Ÿ???O(n^2)????
	 * ??????????i??????ß≥???????i??¶À??
	 * @param arr
	 * @param l
	 * @param r
	 * @return null;
	 */
	@SuppressWarnings("unchecked")
	public static void selectSort(int[] arr,int l,int r) {
		for(int i=0;i<r;i++) {
			
			int index = i;
			for(int j=i;j<r;j++) {
				if(arr[index] > arr[j]) {
					index = j;
				}
			}
			arr[i] = arr[index];
		}
	}
	/**
	 * ????????¡Ÿ???O(x^2)????
	 * ?????????i????j?????????ßÿ???????arr[i]ß≥????????????????????®∞????¶À??j
	 * ????????????????????arr[i],?????????¶À?? int j???????????????????????????swap????
	 * ??????????????arr[i]??a[j]?????????????¶À
	 * ??arr[l,r-1]????????
	 * @param arr  
	 * @param l		????????????
	 * @param r		????????
	 * @return null
	 * @author zt648
	 */
	
	public static void insertSort(int[] arr,int l,int r) {
		for(int i=1;i<r;i++) {
			int value = arr[i];
			int j;
			for(j=i;j>0 && arr[j-1] > value;j--) {
				arr[j] = arr[j-1];
			}
			arr[j] = value;
		}
	}
	/**
	 * ?ˆ„??????¡Ÿ???nlogn?????????????????
	 * 
	 * @param arr
	 * @param l
	 * @param r
	 */
	
	public static void mergeSort(int[] arr,int l,int r) {
		if(l >= r)
			return;
		int mid = (l + r) / 2;
		mergeSort(arr,l,mid);
		mergeSort(arr,mid+1,r);
		if(arr[mid] > arr[mid+1])
			merge(arr,l,mid,r);

	}
	/**
	 * ??arr[l,mid]??arr[mid+1,r]???ß‹?????????????ß“???ß≥????????????¶À??
	 * 
	 * @param arr
	 * @param l    0 
	 * @param mid
	 * @param r    length-1
	 */
	
	private static void merge(int [] arr, int l, int mid, int r) {
		// TODO Auto-generated method stub
		if((r - l) <= 15 && r - l >= 0) {
			insertSort(arr,l,r+1);
			return;
		}
		int[] aux = new int[r - l +1]; // ???????????,?????????????
		for(int j = l;j<=r;j++) 
			aux[j-l] = arr[j];
		int j = mid+1;
		int k = l;
		for(int i = l;i<=r;i++) {
			if(k > mid)
				arr[i] = aux[j++ - l];
			else if( j > r)
				arr[i] = aux[k ++ -l];
			else if(aux[k-l] < aux[j-l])
				arr[i] = aux[k++ - l];
			else if (aux[k-l] > aux[j-l])
				arr[i] = aux[j++ - l];

		}
	}
	private static int min(int a,int b) {
		return a<b?a:b;
	}
	/**
	 * ????????ˆ„????
	 * 
	 * @param arr
	 * @param l
	 * @param r ??????? length-1
	 */
	public static void mergeSortDU(int[] arr,int l,int r) {
		int sz;
		for(sz=1;sz <= r;sz += sz) {
			for(int i = 0;i<=r && i+sz <= r;i += (sz+sz)) {
				if(arr[i+sz-1] > arr[i+sz])
					merge(arr,i,i+sz-1,min(i+sz+sz-1,r));
			}
		}
		
	}
	
	
	public static void quickSort(int[] arr,int l,int r) {
		int value = arr[l];
		if(l == r)
			return;
		int j = quick(arr,l,r);
		quickSort(arr,l,j-1);
		quickSort(arr,j+1,r);
	}
	private static int quick(int[] arr, int l, int r) {
		int j = l;
		int value = arr[l];
		for(int i=l+1;i<=r;i++) {
			if(arr[i] < value) {
				int n = arr[i];
				arr[i] = arr[j+1];
				arr[j+1] = n;
				j++;
			}
		}
		int n = arr[l];
		arr[l] = arr[j];
		arr[j] = n;
		return j;
	}
		

}
